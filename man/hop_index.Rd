% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hop-index.R
\name{hop_index}
\alias{hop_index}
\alias{hop_index_vec}
\alias{hop_index_dbl}
\alias{hop_index_int}
\alias{hop_index_lgl}
\alias{hop_index_chr}
\alias{hop_index_raw}
\alias{hop_index_dfr}
\alias{hop_index_dfc}
\title{Hop over an index}
\usage{
hop_index(.x, .i, .starts, .stops, .f, ...)

hop_index_vec(.x, .i, .starts, .stops, .f, ..., .ptype = list())

hop_index_dbl(.x, .i, .starts, .stops, .f, ...)

hop_index_int(.x, .i, .starts, .stops, .f, ...)

hop_index_lgl(.x, .i, .starts, .stops, .f, ...)

hop_index_chr(.x, .i, .starts, .stops, .f, ...)

hop_index_raw(.x, .i, .starts, .stops, .f, ...)

hop_index_dfr(
  .x,
  .i,
  .starts,
  .stops,
  .f,
  ...,
  .names_to = NULL,
  .name_repair = c("unique", "universal", "check_unique")
)

hop_index_dfc(
  .x,
  .i,
  .starts,
  .stops,
  .f,
  ...,
  .size = NULL,
  .name_repair = c("unique", "universal", "check_unique", "minimal")
)
}
\arguments{
\item{.x}{\verb{[vector]}

The vector to iterate over and apply \code{.f} to.}

\item{.i}{\verb{[vector]}

The index vector that determines the window sizes. The lower bound
of the window range will be computed as \code{.i - .before}, and the upper
bound will be \code{.i + .after}. It is faily common to supply a date vector
as the index, but not required.}

\item{.starts, .stops}{\verb{[vector]}

Vectors of boundary values that make up the windows to bucket \code{.i} with.
Both \code{.starts} and \code{.stops} will be recycled to their common size, and
that common size will be the size of the result. Both vectors should be
the same type as \code{.i}. These boundaries are both \emph{inclusive}, meaning
that \code{.i} will be searched for values that fall into the
range of \verb{[start, stop]}.}

\item{.f}{\verb{[function / formula]}

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function with up
to two arguments: \code{.x} (single argument) or \code{.x} and \code{.y} (two arguments).
The \code{.} placeholder can be used instead of \code{.x}. This allows you to
create very compact anonymous functions with up to two inputs.}

\item{...}{Additional arguments passed on to the mapped function.}

\item{.ptype}{\verb{[vector]}

The prototype corresponding to the type of the output. Defaults to
a \code{list()}.}

\item{.names_to}{Optionally, the name of a column where the names
of \code{...} arguments are copied. These names are useful to identify
which row comes from which input. If supplied and \code{...} is not named,
an integer column is used to identify the rows.}

\item{.name_repair}{One of \code{"unique"}, \code{"universal"}, or
\code{"check_unique"}. See \code{\link[vctrs:vec_as_names]{vec_as_names()}} for the meaning of these
options.

With \code{vec_rbind()}, the repair function is applied to all inputs
separately. This is because \code{vec_rbind()} needs to align their
columns before binding the rows, and thus needs all inputs to
have unique names. On the other hand, \code{vec_cbind()} applies the
repair function after all inputs have been concatenated together
in a final data frame. Hence \code{vec_cbind()} allows the more
permissive minimal names repair.}

\item{.size}{If, \code{NULL}, the default, will determine the number of
rows in \code{vec_cbind()} output by using the standard recycling rules.

Alternatively, specify the desired number of rows, and any inputs
of length 1 will be recycled appropriately.}
}
\description{
\code{hop_index()} is the lower level engine that powers \code{\link[=slide_index]{slide_index()}}. It
has slightly different invariants than \code{slide_index()}, and is useful when
you either need to hand craft boundary values, or want to compute a result
with a size that is different from \code{.x}.
}
\section{Invariants}{


\subsection{\code{hop_index()}}{
\itemize{
\item \code{vec_size(hop_index(.x, .starts, .stops)) == vec_size_common(.starts, .stops)}
\item \code{vec_ptype(hop_index(.x, .starts, .stops)) == list()}
}

}

\subsection{\code{hop_index_vec()} and \verb{hop_index_*()} variants}{
\itemize{
\item \code{vec_size(hop_index_vec(.x, .starts, .stops)) == vec_size_common(.starts, .stops)}
\item \code{vec_size(hop_index_vec(.x, .starts, .stops)[[1]]) == 1L}
\item \code{vec_ptype(hop_index_vec(.x, .starts, .stops, .ptype = ptype)) == ptype}
}

}
}

\section{The \code{.i}-ndex}{


There are 3 restrictions on \code{.i}:
\itemize{
\item The size of \code{.i} must match the size of \code{.x}, \code{.i} will not be recycled.
\item \code{.i} must be an \emph{increasing} vector, but duplicate values
are allowed.
\item \code{.i} is not allowed to have missing values.
}
}

\examples{
library(vctrs)
library(lubridate, warn.conflicts = FALSE)

# ---------------------------------------------------------------------------
# Returning a size smaller than `.x`

i <- as.Date("2019-01-25") + c(0, 1, 2, 3, 10, 20, 35, 42, 45)

# slide_index() allows you to slide relative to `i`
slide_index(i, i, ~.x, .before = weeks(1))

# But you might be more interested in coarser summaries. This groups
# by year-month and computes 2 `.f` on 2 month windows.
i_yearmonth <- year(i) + (month(i) - 1) / 12
slide_index(i, i_yearmonth, ~.x, .before = 1)

# ^ This works nicely when working with dplyr if you are trying to create
# a new column in a data frame, but you'll notice that there are really only
# 3 months, so only 3 values are being calculated. If you only want to return
# a vector of those 3 values, you can use `hop_index()`. You'll have to
# hand craft the boundaries, but this is a general strategy
# I've found useful:
first_start <- floor_date(i[1], "months")
last_stop <- ceiling_date(i[length(i)], "months")
dates <- seq(first_start, last_stop, "1 month")
inner <- dates[2:(length(dates) - 1L)]
starts <- vec_c(first_start, inner)
stops <- vec_c(inner - 1, last_stop)

hop_index(i, i, starts, stops, ~.x)

# ---------------------------------------------------------------------------
# Non-existant dates with `lubridate::months()`

# Imagine you want to compute a 1 month rolling average on this
# irregular daily data.
i <- vec_c(as.Date("2019-02-27") + 0:3, as.Date("2019-03-27") + 0:5)
x <- rnorm(vec_seq_along(i))

# You might try `slide_index()` like this, but you'd run into this error
cnd <- try(slide_index(x, i, mean, .before = months(1)), silent = TRUE)
attr(cnd, "condition")[["message"]]

# This is because when you actually compute the `.i - .before` sequence,
# you hit non-existant dates. i.e. `"2019-03-29" - months(1)` doesn't exist.
i - months(1)

# To get around this, lubridate provides `add_with_rollback()`,
# and the shortcut operation `\%m-\%`, which subtracts the month, then rolls
# forward/backward if it hits an `NA`. You can manually generate boundaries,
# then provide them to `hop_index()`.
starts <- i \%m-\% months(1)
stops <- i

hop_index(x, i, starts, stops, mean)

hop_index(i, i, starts, stops, ~.x)

}
\seealso{
\code{\link[=slide]{slide()}}, \code{\link[=slide_index]{slide_index()}}, \code{\link[=hop_index2]{hop_index2()}}
}
