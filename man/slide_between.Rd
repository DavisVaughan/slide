% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slide-between.R
\name{slide_between}
\alias{slide_between}
\title{Slide between boundaries}
\usage{
slide_between(.x, .i, .starts, .stops, .f, ...)
}
\arguments{
\item{.x}{\code{[vector]}

The vector to iterate over and apply \code{.f} to.}

\item{.i}{\code{[vector]}

The index vector that determines the window sizes. The lower bound
of the window range will be computed as \code{.i - .before}, and the upper
bound will be \code{.i + .after}. It is faily common to supply a date vector
as the index, but not required.}

\item{.starts, .stops}{\code{[vector]}

Vectors of boundary values that make up the windows to bucket \code{.i} with.
Both \code{.starts} and \code{.stops} will be recycled to their common size, and
that common size will be the size of the result. Both vectors should be
the same type as \code{.i}. These boundaries are both \emph{inclusive}, meaning
that \code{.i} will be searched for values that fall into the
range of \code{[start, stop]}.}

\item{.f}{\code{[function / formula]}

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function with up
to two arguments: \code{.x} (single argument) or \code{.x} and \code{.y} (two arguments).
The \code{.} placeholder can be used instead of \code{.x}. This allows you to
create very compact anonymous functions with up to two inputs.}

\item{...}{Additional arguments passed on to the mapped function.}
}
\description{
\code{slide_between()} is the lower level engine that powers \code{\link[=slide_index]{slide_index()}}. It
has slightly different invariants than \code{slide_index()}, and is useful when
you either need to hand craft boundary values, or want to compute a result
with a size that is different from \code{.x}.
}
\section{Invariants}{

\itemize{
\item \code{vec_size_common(.starts, .stops) == vec_size(slide_between(.x, ...))}
}
}

\examples{
library(vctrs)
library(lubridate, warn.conflicts = FALSE)

# ---------------------------------------------------------------------------
# Returning a size smaller than `.x`

i <- as.Date("2019-01-25") + c(0, 1, 2, 3, 10, 20, 35, 42, 45)

# slide_index() allows you to slide relative to `i`
slide_index(i, i, ~.x, .before = weeks(1))

# But you might be more interested in coarser summaries. This groups
# by year-month and computes 2 `.f` on 2 month windows.
i_yearmonth <- year(i) + (month(i) - 1) / 12
slide_index(i, i_yearmonth, ~.x, .before = 1)

# ^ This works nicely when working with dplyr if you are trying to create
# a new column in a data frame, but you'll notice that there are really only
# 3 months, so only 3 values are being calculated. If you only want to return
# a vector of those 3 values, you can use `slide_between()`. You'll have to
# hand craft the boundaries, but this is a general strategy
# I've found useful:
first_start <- floor_date(i[1], "months")
last_stop <- ceiling_date(i[length(i)], "months")
dates <- seq(first_start, last_stop, "1 month")
inner <- dates[2:(length(dates) - 1L)]
starts <- vec_c(first_start, inner)
stops <- vec_c(inner - 1, last_stop)

slide_between(i, i, starts, stops, ~.x)

# ---------------------------------------------------------------------------
# Non-existant dates with `lubridate::months()`

# Imagine you want to compute a 1 month rolling average on this
# irregular daily data.
i <- vec_c(as.Date("2019-02-27") + 0:3, as.Date("2019-03-27") + 0:5)
x <- rnorm(vec_seq_along(i))

# You might try `slide_index()` like this, but you'd run into this error
cnd <- try(slide_index(x, i, mean, .before = months(1)), silent = TRUE)
attr(cnd, "condition")[["message"]]

# This is because when you actually compute the `.i - .before` sequence,
# you hit non-existant dates. i.e. `"2019-03-29" - months(1)` doesn't exist.
i - months(1)

# To get around this, lubridate provides `add_with_rollback()`,
# and the shortcut operation `\%m-\%`, which subtracts the month, then rolls
# forward/backward if it hits an `NA`. You can manually generate boundaries,
# then provide them to `slide_between()`.
starts <- i \%m-\% months(1)
stops <- i

slide_between(x, i, starts, stops, mean)

slide_between(i, i, starts, stops, ~.x)

# ---------------------------------------------------------------------------
# Business calendars with RcppQuantuccia

# Imagine you work in a company with daily costs that fall on these dates.
# Notice that these are strictly weekdays that cross over a weekend.
i <- as.Date("2019-08-15") + c(0:1, 4, 6, 7)
wday(i, label = TRUE)

# If you are following a "business calendar" and want to compute a rolling
# 2 day computation, you might want `"2019-08-19"` (a Monday) to be paired
# with `"2019-08-16"` (a Friday) because they are adjacent in the business
# week. Using the RcppQuantuccia package, we can use `advanceUnits()` to
# compute the correct business day boundaries for use in `slide_between()`.
library(RcppQuantuccia)
starts <- advanceUnits(i, -1, "Days")
stops <- i

# "The current day + 1 business day before"
slide_between(i, i, starts, stops, ~.x)

}
